var b=process.argv[2],d=process.argv[3],e=process.argv[4],f,g,k,l; b?"-h"===b||"--help"===b?(p("usage: node ipcalc [-h] [-n | --host] <IPv4 Address> <submask> | <cidr prefix> [hosts OPT]\n\nnode ipcalc help:\n=================\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tSubmask\t\tValid Submask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"),process.exit(0)):"-v"=== b||"--version"===b?(p("3.0.0\n"),process.exit(0)):"-i"===b||"--info"===b?(p("Author: Eric Lagergren <ericscottlagergren@gmail.com>\nBugs: https://github.com/EricLagerg/node-ipcalc/issues\nVersion: 3.0.0\n"),process.exit(0)):"-"===b.substr(0,1)&&"-n"!==b&&"--host"!==b&&(console.log(b.substr(0,1)),p("usage: node ipcalc [-h] [-n | --host] <IPv4 Address> <submask> | <cidr prefix> [hosts OPT]\n\nnode ipcalc help:\n=================\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tSubmask\t\tValid Submask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"), process.exit(1)):(p("usage: node ipcalc [-h] [-n | --host] <IPv4 Address> <submask> | <cidr prefix> [hosts OPT]\n\nnode ipcalc help:\n=================\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tSubmask\t\tValid Submask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"),process.exit(1)); function p(a){process.stdout.write(a)}f=d;g=b;if(d)if("-n"===b||"--host"===b||32<f){f=+e;g=d;var s=f;l=0!==s?32-Math.ceil(Math.log(s)/Math.log(2)):0;k=r(l)}else 32>=f?(l=f,k=r(parseInt(f,10))):4===f.split(".").length&&(l=t(),k=f);else{var q=b.split("/");g=q[0];l=q[1];k=r(q[1])}l=+l;var u=g.split("."),v=k.split(".");function w(a,c){var h=a.split(".");4===h.length&&""!==a||x(c);for(var m=0;4>m;m++){var n=+h[m];(n!=h[m]||0>n||255<n)&&x(c);h[m]=n}}w(g,"IP");w(k,"Subnet Mask"); function y(a){var c;c=0+(+a[3]<<24>>>0);c+=+a[2]<<16>>>0;c+=+a[1]<<8>>>0;return c+=+a[0]>>>0}function z(a){return[0,16,8,24].map(function(c){return a>>c&255}).join(".")}function r(a){a=-1<<32-a;return[a>>24&255,a>>16&255,a>>8&255,a&255].join(".")}function t(){var a=f.split(".").reduce(function(a,h){return(a<<8|h)>>>0}),a=a-(a>>>1&1431655765),a=(a&858993459)+(a>>>2&858993459);return 16843009*(a+(a>>>4)&252645135)>>>24} function x(a){process.stdout.write(["No valid",a,"entered\n"].join(" "));process.exit(1)}var A,B=l,B=B||0;2<=B&&(B=Math.pow(2,32-B)-2);A=B;var C=2>=A?A.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","):0,D=y(u),E=y(v),F=z(D&E),G=z(D|~E&4294967295),H=function(a){if(128>a)return"Class A";if(192>a)return"Class B";if(224>a)return"Class C";if(240>a)return"Class D";if(256>a)return"Class E";x("IP")}(u[0]),I,J=l%8;I=J?Math.pow(2,J):Math.pow(2,8);var K,L=~(-1<<32-l);K=[L>>24&255,L>>16&255,L>>8&255,L&255].join("."); var M=F.split("."),N=G.split(".");M[3]=+M[3]+1;N[3]=+N[3]-1;var O=k,P=l,Q=M.join("."),R=N.join(".");process.stdout.write("Address: "+g+"\n");process.stdout.write("Netmask: "+O+" = "+P+"\n");process.stdout.write("Wildcard: "+K+"\n");process.stdout.write("Class: "+H+"\n");process.stdout.write("--\x3e\n");process.stdout.write("Network: "+F+"\n");process.stdout.write("NetMin: "+Q+"\n");process.stdout.write("NetMax: "+R+"\n");process.stdout.write("Broadcast: "+G+"\n"); process.stdout.write("Subnets: "+I+"\n");process.stdout.write("Hosts/Net: "+C.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+"\n");