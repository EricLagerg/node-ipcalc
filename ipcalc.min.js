/*
 
 @copyright
 Copyright 2014 Eric Lagergren

 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
var b=process.argv[2],c=process.argv[3],d=process.argv[4],e,g,h,l,m;
b?"-h"===b||"--help"===b?(n("usage: node ipcalc [-h] [-s | --subnets] [-n | --host] <IPv4 Address>[[/]prefix] [netmask] [hosts OPT]\n\nnode ipcalc help:\n=================\n\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tPrefix/netmask\tValid Sub(net)Mask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-s, --subnets\tsplit network into smaller subnetworks\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"),process.exit(0)):
"-v"===b||"--version"===b?(n("4.0.1\n"),process.exit(0)):"-i"===b||"--info"===b?(n("Author: Eric Lagergren <ericscottlagergren@gmail.com>\nBugs: https://github.com/EricLagerg/node-ipcalc/issues\nVersion: 4.0.1\n"),process.exit(0)):"-"===b.substr(0,1)&&"-n"!==b&&"--host"!==b&&(n("usage: node ipcalc [-h] [-s | --subnets] [-n | --host] <IPv4 Address>[[/]prefix] [netmask] [hosts OPT]\n\nnode ipcalc help:\n=================\n\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tPrefix/netmask\tValid Sub(net)Mask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-s, --subnets\tsplit network into smaller subnetworks\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"),
process.exit(1)):(n("usage: node ipcalc [-h] [-s | --subnets] [-n | --host] <IPv4 Address>[[/]prefix] [netmask] [hosts OPT]\n\nnode ipcalc help:\n=================\n\npositional arguments:\n\tIPv4 Address\tValid IPv4 Address\n\n\tPrefix/netmask\tValid Sub(net)Mask in CIDR\n\t\t\tprefix or quad-dotted form\n\noptional arguments:\n\t-n, --host\tuse number of hosts to find network information\n\t-s, --subnets\tsplit network into smaller subnetworks\n\t-i, --info\tget author information\n\t-h, --help\tget this message\n\t-v, --version\tget version\n"),
process.exit(1));function n(a){process.stdout.write(a)}e=c;g=b;
if(c)"-n"===b||"--host"===b||32<e?(e=+d,g=c,l=v(),h=w(-1<<32-l)):32>=e?(l=e,h=w(-1<<32-e)):4===e.split(".").length&&(l=x(),h=e);else{var q=b.split("/"),s=q[0],t=q[1],u=q.length;if(2===u)g=s,e=t,32<e?(l=v(),h=w(-1<<32-l)):32>=e?(l=e,h=w(-1<<32-e)):(l=x(),h=e);else if(1===u){var y,z=require("os").networkInterfaces(),A;for(A in z)for(var B in z[A]){var C=z[A][B];"IPv4"!==C.family||C.internal||(y=C.address)}m=1;g=y;e=s;4===s.split(".").length?(l=x(),h=e):32>=e?(l=e,h=w(-1<<32-e)):(l=v(),h=w(-1<<32-l))}else D("anything")}
isNaN(l)&&D("prefix or submask");var E=g.split("."),F=h.split(".");function G(a,f){var k=a.split(".");4===k.length&&""!==a||D(f);for(var p=0;4>p;p++){var r=+k[p];(r!=k[p]||0>r||255<r)&&D(f);k[p]=r}}G(g,"IP");G(h,"Subnet Mask");function H(a){var f;f=0+(+a[0]<<24>>>0);f+=+a[1]<<16>>>0;f+=+a[2]<<8>>>0;return f+=+a[3]>>>0}function w(a){return[a>>24&255,a>>16&255,a>>8&255,a&255].join(".")}function v(){var a=e;return 0!==a?32-Math.ceil(Math.log(a)/Math.log(2)):0}
function x(){var a=e.split(".").reduce(function(a,k){return(a<<8|k)>>>0}),a=a-(a>>>1&1431655765),a=(a&858993459)+(a>>>2&858993459);return 16843009*(a+(a>>>4)&252645135)>>>24}function D(a){process.stdout.write(["No valid",a,"entered\n"].join(" "));process.exit(1)}var I=m?"WARNING: IP TAKEN FROM COMPUTER'S NETWORK IP":"IPv4 address entered",J,K=l,K=K||0;2<=K&&(K=Math.pow(2,32-K)-2);J=K;
var L=2<=J?J.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","):0,M=H(E),N=H(F),O=w(M&N),P=w(M|~N&4294967295),Q=function(a){if(128>a)return"Class A";if(192>a)return"Class B";if(224>a)return"Class C";if(240>a)return"Class D";if(256>a)return"Class E";D("IP")}(E[0]),R,S=l%8;R=S?Math.pow(2,S):Math.pow(2,8);var T=w(~N),U="0x"+M.toString(16).toUpperCase(),V="0x"+N.toString(16).toUpperCase(),W=O.split("."),X=P.split(".");W[3]=+W[3]+1;X[3]=+X[3]-1;var Y=g,Z=h,$=l,aa=W.join("."),ba=X.join(".");
process.stdout.write(I+"\n--------------------\n\n");process.stdout.write("Address:                - "+Y+"\n");process.stdout.write("Address (hex):          - "+U+"\n");process.stdout.write("Address (decimal):      - "+M+"\n");process.stdout.write("Netmask:                - "+Z+" = "+$+"\n");process.stdout.write("Netmask (hex):          - "+V+"\n");process.stdout.write("Netmask (decimal):      - "+N+"\n");process.stdout.write("Wildcard:               - "+T+"\n");
process.stdout.write("Class:                  - "+Q+"\n");process.stdout.write("Network:                - "+O+"\n");process.stdout.write("NetMin:                 - "+aa+"\n");process.stdout.write("NetMax:                 - "+ba+"\n");process.stdout.write("Broadcast:              - "+P+"\n");process.stdout.write("Subnets:                - "+R+"\n");process.stdout.write("Hosts/Net:              - "+L+"\n\n-\n");
